[{"path":"https://asshah4.github.io/shiva/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Anish Sanjay Shah Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://asshah4.github.io/shiva/articles/intro-egm.html","id":"surface-recordings","dir":"Articles","previous_headings":"","what":"Surface recordings","title":"Introduction to the EGM Class","text":"simple example taking MUSE XML file converting digital signal.","code":"# Read in data fp <- system.file('extdata', 'muse-sinus.xml', package = 'shiva') xml <- readLines(fp) head(xml) #> [1] \"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\" #> [2] \"<!DOCTYPE RestingECG SYSTEM \\\"restecg.dtd\\\">\"    #> [3] \"<RestingECG>\"                                    #> [4] \"   <MuseInfo>\"                                   #> [5] \"      <MuseVersion>9.0.10.18530<\/MuseVersion>\"   #> [6] \"   <\/MuseInfo>\"  # Instead, can read this in as a MUSE XML file # Now as an `egm` class ecg <- read_muse(fp) ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  # Can now plot this easily ggm(ecg)"},{"path":"https://asshah4.github.io/shiva/articles/intro-egm.html","id":"intracardiac-recordings","dir":"Articles","previous_headings":"","what":"Intracardiac recordings","title":"Introduction to the EGM Class","text":"signal now comes LSPro data.","code":"# Read in data fp <- system.file('extdata', 'lspro-avnrt.txt', package = 'shiva') lspro <- readLines(fp) head(lspro, n = 20) #>  [1] \"[Header]\"                  \"File Type: 1\"              #>  [3] \"Version: 2\"                \"Channels exported: 11\"     #>  [5] \"Samples per channel: 3522\" \"Start time: 15:17:57\"      #>  [7] \"End time: 15:18:01\"        \"Ch. Info. Pointer: 320\"    #>  [9] \"Stamp Data: C\"             \"Mux format: 0\"             #> [11] \"Mux Block Size: \"          \"Data Format 1\"             #> [13] \"Sample Rate: 1000Hz\"       \"Channel #:   1\"            #> [15] \"Label: I\"                  \"Range: 5mv \"               #> [17] \"Low: .5Hz\"                 \"High: 100Hz\"               #> [19] \"Sample rate: 1000Hz\"       \"Color: FFFFFF\"  # Instead, read this as signal, breaking apart header and signal data # Presented as an `egm` class object egm <- read_lspro(fp) egm #> <Electrical Signal> #> ------------------- #> Recording Duration:  3.522 seconds #> Recording frequency  1000  hz #> Number of channels:  11  #> Channel Names:  I III V1 CS_1-2 CS_3-4 CS_5-6 CS_7-8 CS_9-10 HIS_D HIS_M RV_1-2  #> Annotation:  # Similarly, can be visualized with ease ggm(egm, channels = c('HIS', 'CS', 'RV')) +     theme_egm()"},{"path":"https://asshah4.github.io/shiva/articles/intro-segmentation.html","id":"sinus-rhythm","dir":"Articles","previous_headings":"","what":"Sinus rhythm","title":"Introduction to Signal Segmentation","text":"initial approach use sinus rhythm, can easily evaluated using rule-based approach: \\(QRS_{}\\) (index QRS complex) \\(QRS_{+1}\\) (following QRS complex), must T wave \\(QRS_{}\\) \\(QRS_{-1}\\) (previous QRS complex), must P wave ≥ 1 additional depolarization signals \\(P_{}\\) \\(QRS_{}\\) file represent ECG data set obtained MUSE v9 contains 12-leads data 10 seconds.","code":"ecg <- read_wfdb(record = 'muse-sinus',                  record_dir = system.file('extdata', package = 'shiva'),                  annotator = 'ecgpuwave') # Example data ecg #> <Electrical Signal> #> ------------------- #> Recording Duration:  10 seconds #> Recording frequency  500  hz #> Number of channels:  12  #> Channel Names:  I II III AVF AVL AVR V1 V2 V3 V4 V5 V6  #> Annotation:  ecgpuwave # Visualize g <-     ggm(object) |>     draw_boundary_mask()  # Should create a number of high likelihood sinus beats beats <- segment_sinus_beats(object) expect_length(beats, 11) expect_equal(nrow(beats[[1]]$signal), 263) # Checked the size of the 1st beat"},{"path":"https://asshah4.github.io/shiva/articles/wfdb.html","id":"introduction-to-wfdb","dir":"Articles","previous_headings":"","what":"Introduction to WFDB","title":"Guide to WFDB","text":"physionet WFDB","code":""},{"path":[]},{"path":"https://asshah4.github.io/shiva/articles/wfdb.html","id":"macos-and-unix-like-systems","dir":"Articles","previous_headings":"Installation","what":"MacOS and Unix-like systems","title":"Guide to WFDB","text":"Root","code":""},{"path":"https://asshah4.github.io/shiva/articles/wfdb.html","id":"windows","dir":"Articles","previous_headings":"Installation","what":"Windows","title":"Guide to WFDB","text":"WSL2 Cygwin","code":""},{"path":"https://asshah4.github.io/shiva/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anish S. Shah. Author, maintainer.","code":""},{"path":"https://asshah4.github.io/shiva/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shah (2023). shiva: Evaluating cardiac electrophysiology signals. R package version 0.0.0.9000, https://asshah4.github.io/shiva/, https://github.com/asshah4/shiva.","code":"@Manual{,   title = {shiva: Evaluating cardiac electrophysiology signals},   author = {Anish S. Shah},   year = {2023},   note = {R package version 0.0.0.9000, https://asshah4.github.io/shiva/},   url = {https://github.com/asshah4/shiva}, }"},{"path":"https://asshah4.github.io/shiva/index.html","id":"shiva","dir":"","previous_headings":"","what":"Evaluating cardiac electrophysiological signals","title":"Evaluating cardiac electrophysiological signals","text":"looking cardiac electrogram data, important practice identifying intervals depolarizations. range sinoatrial conduction properties, atrioventricular ventriculoatrial intervals, Hissian intervals, etc. names (STIMULATION, HISSIAN, INTERVALS, VENTRICULAR, ATRIAL) put anagram name package: shiva. goal shiva work electrophysiology (EP) signal data help evaluate intervals, pacing maneuvers, stimulation protocols, well generate informative plots teaching/learning understanding EP studies.","code":""},{"path":"https://asshah4.github.io/shiva/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Evaluating cardiac electrophysiological signals","text":"can install released version shiva CRAN : development version GitHub :","code":"#install.packages(\"shiva\") # install.packages(\"devtools\") devtools::install_github(\"asshah4/shiva\")"},{"path":"https://asshah4.github.io/shiva/reference/add_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Add color scheme to a ggm object — add_colors","title":"Add color scheme to a ggm object — add_colors","text":"Add color scheme ggm object","code":""},{"path":"https://asshah4.github.io/shiva/reference/add_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add color scheme to a ggm object — add_colors","text":"","code":"add_colors(object, palette, mode = \"light\")"},{"path":"https://asshah4.github.io/shiva/reference/add_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add color scheme to a ggm object — add_colors","text":"palette Color palette options leads : material - material color theme bw - black white color theme based light/dark mode mode Adjust color settings either light dark mode","code":""},{"path":"https://asshah4.github.io/shiva/reference/add_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add color scheme to a ggm object — add_colors","text":"Returns updated ggm object","code":""},{"path":"https://asshah4.github.io/shiva/reference/add_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Add intervals — add_intervals","title":"Add intervals — add_intervals","text":"Add intervals","code":""},{"path":"https://asshah4.github.io/shiva/reference/add_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add intervals — add_intervals","text":"","code":"add_intervals(object, intervals = TRUE, channel, minimum_interval = 100)"},{"path":"https://asshah4.github.io/shiva/reference/add_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add intervals — add_intervals","text":"intervals choice whether interval data included. annotation channel must present, otherwise nothing plotted. argument allows several choices. TRUE: intervals annotated (default option) integer: integer vector represents indexed intervals annotated. NULL, intervals annotated. example, 5 beats, 4 intervals can labeled. can referenced index, e.g. intervals = c(2) reference 2nd interval 5 beat range.","code":""},{"path":"https://asshah4.github.io/shiva/reference/add_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add intervals — add_intervals","text":"Returns updated ggm object","code":""},{"path":"https://asshah4.github.io/shiva/reference/annotation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotation Table — annotation_table","title":"Annotation Table — annotation_table","text":"annotation_table() modifies data.table class work annotation data.","code":""},{"path":"https://asshah4.github.io/shiva/reference/annotation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotation Table — annotation_table","text":"","code":"annotation_table(   annotator = character(),   time = numeric(),   sample = integer(),   type = character(),   subtype = character(),   channel = integer(),   number = integer() )  is_annotation_table(x)"},{"path":"https://asshah4.github.io/shiva/reference/annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations — annotations","title":"Add annotations — annotations","text":"Annotations labels specific points samples within signal. can semantic, may represent boundary region signal, just individual peak. stored WFDB-compatible annotation file built ggm object.","code":""},{"path":"https://asshah4.github.io/shiva/reference/annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations — annotations","text":"","code":"draw_boundary_mask(object)"},{"path":"https://asshah4.github.io/shiva/reference/color_channels.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify channel colors — color_channels","title":"Modify channel colors — color_channels","text":"Modify channel colors","code":""},{"path":"https://asshah4.github.io/shiva/reference/color_channels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify channel colors — color_channels","text":"","code":"color_channels(x, palette, mode = \"light\")"},{"path":"https://asshah4.github.io/shiva/reference/color_channels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify channel colors — color_channels","text":"palette Color palette options leads : material - material color theme bw - black white color theme based light/dark mode mode Adjust color settings either light dark mode","code":""},{"path":"https://asshah4.github.io/shiva/reference/color_channels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify channel colors — color_channels","text":"Character vector hex code colors based selected palette light/dark mode","code":""},{"path":"https://asshah4.github.io/shiva/reference/colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Theming and color options for ggm objects — colors","title":"Theming and color options for ggm objects — colors","text":"general purpose improve visualization electrical signals. pattern colors generally given different recording software, can replicated help improve visibility.","code":""},{"path":"https://asshah4.github.io/shiva/reference/colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theming and color options for ggm objects — colors","text":"","code":"theme_egm()  theme_egm_light()  theme_egm_dark()"},{"path":"https://asshah4.github.io/shiva/reference/describe_wfdb2.html","id":null,"dir":"Reference","previous_headings":"","what":"Describes signals based on WFDB-formatted files — describe_wfdb2","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"Describes signals based WFDB-formatted files","code":""},{"path":"https://asshah4.github.io/shiva/reference/describe_wfdb2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"","code":"describe_wfdb2(record, location = \".\")"},{"path":"https://asshah4.github.io/shiva/reference/describe_wfdb2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Describes signals based on WFDB-formatted files — describe_wfdb2","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) location directory target record located within. related PhysioNet, using location name mitdb access online directory MIT Database.","code":""},{"path":"https://asshah4.github.io/shiva/reference/detect_surface_beats.html","id":null,"dir":"Reference","previous_headings":"","what":"ECG waveform detection — detect_surface_beats","title":"ECG waveform detection — detect_surface_beats","text":"ECG waveform detection","code":""},{"path":"https://asshah4.github.io/shiva/reference/detect_surface_beats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECG waveform detection — detect_surface_beats","text":"","code":"detect_surface_beats(   record,   record_dir = \".\",   detector,   wfdb_path = getOption(\"wfdb_path\"),   ... )"},{"path":"https://asshah4.github.io/shiva/reference/detect_surface_beats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ECG waveform detection — detect_surface_beats","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path')","code":""},{"path":"https://asshah4.github.io/shiva/reference/detect_surface_beats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ECG waveform detection — detect_surface_beats","text":"Creates WFDB-compatible annotation file","code":""},{"path":"https://asshah4.github.io/shiva/reference/detect_surface_beats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ECG waveform detection — detect_surface_beats","text":"","code":"record <- \"300\" detector <- \"ecgpuwave\""},{"path":"https://asshah4.github.io/shiva/reference/egm-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — egm-vctrs","title":"Internal vctrs methods — egm-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://asshah4.github.io/shiva/reference/egm.html","id":null,"dir":"Reference","previous_headings":"","what":"Electrogram and electrocardiogram data class definition — egm","title":"Electrogram and electrocardiogram data class definition — egm","text":"serves combinatorial class describe electrical signal data R. based formats available WFDB, digitized ease use within R ecosystem. egm object contains three components list: signal data multiple channels header information annotation labels specified time points components help navigate, visualize data.","code":""},{"path":"https://asshah4.github.io/shiva/reference/egm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electrogram and electrocardiogram data class definition — egm","text":"","code":"egm(   signal = signal_table(),   header = header_table(),   annotation = annotation_table(),   ... )  is_egm(x)"},{"path":"https://asshah4.github.io/shiva/reference/egm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Electrogram and electrocardiogram data class definition — egm","text":"individual components class defined respective functions signal_table(), header_table(), annotation_table(). simple classes build upon data.table class.","code":""},{"path":"https://asshah4.github.io/shiva/reference/extract_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract raw signal data from an egm object — extract_signal","title":"Extract raw signal data from an egm object — extract_signal","text":"Raw signal data may required, particularly storing manipulating data, example, feeding analytical pipeline. means extraneous elements, meta information, may unnecessary. function helps strip away extract just signal data channel names.","code":""},{"path":"https://asshah4.github.io/shiva/reference/extract_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract raw signal data from an egm object — extract_signal","text":"","code":"extract_signal(object, data_format = c(\"data.frame\", \"matrix\", \"array\"), ...)"},{"path":"https://asshah4.github.io/shiva/reference/extract_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract raw signal data from an egm object — extract_signal","text":"format <character> choice either data.frame (default), matrix, array tells data structured. explanation details.","code":""},{"path":"https://asshah4.github.io/shiva/reference/extract_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract raw signal data from an egm object — extract_signal","text":"object described format option","code":""},{"path":"https://asshah4.github.io/shiva/reference/extract_signal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract raw signal data from an egm object — extract_signal","text":"options return data vary based need. data can extracted follows: data.frame containing equal number rows number samples, column named recording channel derived . Data frames, columnar nature, also include sample index position. matrix containing equal number rows number samples, column named recording channel derived array containing individual vectors signal, named channel derived ","code":""},{"path":[]},{"path":"https://asshah4.github.io/shiva/reference/ggm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of EGMs using ggplot — ggm","text":"","code":"ggm(data, channels = character(), time_frame = NULL, mode = \"dark\", ...)"},{"path":"https://asshah4.github.io/shiva/reference/ggm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of EGMs using ggplot — ggm","text":"data Data egm class, inclues header (meta) signal information together. channels Character vector channels use. Can give either channel label (e.g \"CS 1-2\") recording device/catheter type (e.g \"\" \"ECG\"). channels selected, default channels. time_frame time range displaced given format vector length 2. left value start, right value end time. given seconds (decimals may used). mode base color scheme used. Defaults \"white black\" scheme, similar LabSystem Pro format (high-contrast visualizations), minimizing eye strain.","code":""},{"path":"https://asshah4.github.io/shiva/reference/header_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Header Table — header_table","title":"Header Table — header_table","text":"header_table() modifies data.table class work header data. header data read similar format WFDB files compatible/interchangeable writing disk.","code":""},{"path":"https://asshah4.github.io/shiva/reference/header_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Header Table — header_table","text":"","code":"header_table(   record_name = character(),   number_of_channels = integer(),   frequency = 250,   samples = integer(),   start_time = Sys.time(),   ADC_saturation = integer(),   file_name = character(),   storage_format = 16L,   ADC_gain = 200L,   ADC_baseline = ADC_zero,   ADC_units = \"mV\",   ADC_resolution = 12L,   ADC_zero = 0L,   initial_value = ADC_zero,   checksum = 0L,   blocksize = 0L,   label = character(),   info_strings = list(),   additional_gain = 1,   low_pass = integer(),   high_pass = integer(),   color = \"#000000\",   scale = integer() )  is_header_table(x)"},{"path":"https://asshah4.github.io/shiva/reference/header_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Header Table — header_table","text":"INFO List characters applied writing file","code":""},{"path":"https://asshah4.github.io/shiva/reference/header_table.html","id":"header-file-structure","dir":"Reference","previous_headings":"","what":"Header file structure","title":"Header Table — header_table","text":"three components header file Record line contains following information, order documented, however pieces may missing based different parameters. left right... Record name Number signals: represents number segments/channels Sampling frequency (optional) Number samples (optional) Time: HH:MM:SS format (optional) Date: DD/MM/YYYY (optional) Signal specification lines contains specifications individual signals, must many signal lines reported record line. left right.... File name: usually *.dat Format : represents storage type, e.g. 8-bit 16-bit ADC gain: ADC units per physical unit (optional) Baseline: corresponds 0 physical units, sep = '*(0)\" (optional) Units: '/' field separator e.g '*/mV' (optional) ADC resolution : bits, usually 8 16 (optional) ADC zero: represents middle ADC input range (optional) Initial value (optional) Checksum (optional) Block size (optional) Description: text label information (optional) Info strings unstructured lines contains information record. Usually descriptive. Starts initial '#' without preceding white space beginning line.","code":""},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG and EGM data from LabSystem Pro — lspro","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"function allows reading LS Pro data based text export signals. Signals can exported directly LS Pro system. LabSystem Pro acquired Boston Scientific original company Bard. common electrophysiology signal processing device visualization measurement intracardiac signals.","code":""},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"","code":"read_lspro(file, n = Inf)  read_lspro_header(file)  read_lspro_signal(file, n = Inf)"},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"file path file data located. must *.txt file. See details format. n Number signal values return (channel data). Defaults values.","code":""},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"egm class object list eps signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":"data-export","dir":"Reference","previous_headings":"","what":"Data Export","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"steps data export follows. Start LabSystem PRO Open patient record Display waveform recording Review Window Scroll point interest waveform recording Right click review window left region interest Select Export option, either default time range entire visible page (depends sweep speed).","code":""},{"path":"https://asshah4.github.io/shiva/reference/lspro.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data Format","title":"Read in ECG and EGM data from LabSystem Pro — lspro","text":"Channel Data interleaved example (sample indexed 1):","code":"[Header] Recording info – contains (example):  [Header]<CR><LF>      File Type: 1<CR><LF>      Version: 1<CR><LF>      Channels exported: 22<CR><LF>      Samples per channel: 5000<CR><LF>      Start time:  6:55:24<CR><LF>      End time:  6:55:29<CR><LF>      Ch. Info. Pointer: 320<CR><LF>      Stamp Data: T<CR><LF>      Mux format: 0<CR><LF>      Mux Block Size: <CR><LF>      Data Format 1<CR><LF>      Sample Rate: 1000Hz<CR><LF>  [Header] Channel info (per channel example):    Channel #: 1<CR><LF>   Label: III<CR><LF>      Range: 5mv <CR><LF>      Low: 1Hz<CR><LF>      High: 100Hz<CR><LF>      Sample rate: 1000Hz<CR><LF>      Color: 0000FF<CR><LF>      Scale: -7<CR><LF>  [Data] As described below:      -256,-1056,576,-256,320,-736,144,576,-592,176,608,240,176,-560,496,-     144,0,0,-32,-48,-32,-80<CR><LF>"},{"path":"https://asshah4.github.io/shiva/reference/muse.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in ECG data from MUSE — muse","title":"Read in ECG data from MUSE — muse","text":"function serves read/convert XML based files MUSE system digital signal. can subsequently written formats. MUSE system somewhat proprietary, version may may allow export options XML.","code":""},{"path":"https://asshah4.github.io/shiva/reference/muse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in ECG data from MUSE — muse","text":"","code":"read_muse(file)"},{"path":"https://asshah4.github.io/shiva/reference/muse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in ECG data from MUSE — muse","text":"file ECG file MUSE XML format","code":""},{"path":"https://asshah4.github.io/shiva/reference/muse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in ECG data from MUSE — muse","text":"egm class object list eps signals format data.table, attached header attribute contains additional recording data.","code":""},{"path":"https://asshah4.github.io/shiva/reference/muse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in ECG data from MUSE — muse","text":"GE Healthcare MUSE v9 currently model used. functions tested older models.","code":""},{"path":"https://asshah4.github.io/shiva/reference/new_ggm.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct ggm class — new_ggm","title":"Construct ggm class — new_ggm","text":"Construct ggm class","code":""},{"path":"https://asshah4.github.io/shiva/reference/new_ggm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct ggm class — new_ggm","text":"","code":"new_ggm(object = ggplot(), header = list(), annotation = annotation_table())"},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Segmentation of electrical signal by wave specifications — segmentation","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Segmentation electrical signal wave specifications","code":""},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"","code":"segmentation(object, by, pad = FALSE)  segment_sinus_beats(object)"},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"object Object egm class, includes header, signal information, annotation information. Character vector naming waveform type segment . Options include following types: sinus = call segment_sinus_beats() egm object pad Logical value whether pad results segmented beats . add baseline value (specified within header signal) pad sides signal. takes longest signal group, adds 5% side, lengthens signal size. Defaults FALSE","code":""},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Returns list egm objects. item segmentation egm object, using selected channels (available). attempt optimize pick best annotations help create consistencies signal channels possible.","code":""},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"Requires 12-lead ECG digitized, input egm object. object must annotation file associated contains demarcation P waves, R waves, T waves.","code":""},{"path":"https://asshah4.github.io/shiva/reference/segmentation.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Segmentation of electrical signal by wave specifications — segmentation","text":"segment_sinus_beats(): Identify individual sinus beats surface ECG extract individual beats, returning list sinus beats form egm class. consistent P, R, T wave amongst channels. channel , example, visible T wave, still label information gained channels.","code":""},{"path":"https://asshah4.github.io/shiva/reference/shiva-package.html","id":null,"dir":"Reference","previous_headings":"","what":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","title":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","text":"Importing rhythm signal data analysis R","code":""},{"path":[]},{"path":"https://asshah4.github.io/shiva/reference/shiva-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"shiva: Evaluating cardiac electrophysiology signals — shiva-package","text":"Maintainer: Anish S. Shah ashah282@uic.edu (ORCID)","code":""},{"path":"https://asshah4.github.io/shiva/reference/signal_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal Table — signal_table","title":"Signal Table — signal_table","text":"signal_table() modifies data.table class work electrical signal data. input data set equal number rows. add column index positions called sample already exist.","code":""},{"path":"https://asshah4.github.io/shiva/reference/signal_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal Table — signal_table","text":"","code":"signal_table(...)  is_signal_table(x)"},{"path":"https://asshah4.github.io/shiva/reference/wfdb.html","id":null,"dir":"Reference","previous_headings":"","what":"Waveform Database (WFDB) Software Package — wfdb","title":"Waveform Database (WFDB) Software Package — wfdb","text":"implementation WFDB back-end WFDB using combination python, C++, C language. related functions documented separately. serves overview conversion WFDB formats R formats. documentation, specific WFDB generated files described.","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Waveform Database (WFDB) Software Package — wfdb","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path')","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb.html","id":"wfdb","dir":"Reference","previous_headings":"","what":"WFDB","title":"Waveform Database (WFDB) Software Package — wfdb","text":"WFDB (Waveform Database) Software Package developed past thirty years, providing large collection software processing analyzing physiological waveforms. package written highly portable C can used popular platforms, including GNU/Linux, MacOS X, MS-Windows, versions Unix. foundation WFDB Software Package WFDB library, consisting set functions reading writing digitized signals annotations. functions can used programs written C, C++, Fortran, running operating system ANSI/ISO C compiler available, including versions Unix, MS-DOS, MS-Windows, Macintosh OS, VMS.","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb.html","id":"data-format","dir":"Reference","previous_headings":"","what":"Data format","title":"Waveform Database (WFDB) Software Package — wfdb","text":"records WFDB uses three components... Signals: integer values equal intervals certain sampling frequency Header attributes: recording information sample number, gain, sampling frequency Annotations: information record abeat labels alarm triggers","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Waveform Database (WFDB) Software Package — wfdb","text":"Original software: George Moody, Tom Pollard, Benjamin Moody  R implementation: Anish S. Shah  Last updated: 04/28/23","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Read WFDB-compatible annotation file — wfdb_annotations","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"Individual annotation types described command-line tool annotating WFDB-files, well extension appended record name notate type. Generally, types annotations supported described : atr = manually reviewed corrected reference annotation files ann = general annotator file ecgpuwave = files contain surface ECG demarcation (P, QRS, T waves) sqrs/wqrs/gqrs = standard WFDB peak detection R waves detailed explanation given . Additionally, files read converted binary format textual format. raw data however may inadequate, original annotation may erroneous. cases, empty annotation_table object returned.","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"","code":"read_annotation(   record,   record_dir = \".\",   annotator,   wfdb_path = getOption(\"wfdb_path\"),   begin = 0,   end = NULL,   ... )  write_annotation(   data,   annotator,   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   ... )  annotate_wfdb(   record,   record_dir,   annotator,   wfdb_path = getOption(\"wfdb_path\"),   ... )"},{"path":"https://asshah4.github.io/shiva/reference/wfdb_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') data table containing 6 columns","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"Outputs WFDB provided extension","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_annotations.html","id":"annotation-files","dir":"Reference","previous_headings":"","what":"Annotation files","title":"Read WFDB-compatible annotation file — wfdb_annotations","text":"following annotation file types described . ecgpuwave analyzes ECG signal specified record, detecting QRS complexes locating beginning, peak, end P, QRS, ST-T waveforms. output ecgpuwave written standard WFDB-format annotation file (extension \"*.ecgpuwave\", expected). file can converted text format using rdann. details given ECGPUWAVE page. type column can p, t, N peak P wave, T wave, QRS (R peak) directly. output notation also includes waveform onset XXX waveform offset XXX. number column gives information type labels. number column gives modifier information. type classifier T wave annotation, number column can 0 (normal), 1 (inverted), 2 (positive), 3 (negative), 4 (biphasic negative-positive), 5 (biphasic positive-negative). type waveform onset offset, number can 0 (P wave), 1 (QRS complex), 2 (T wave).","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_io.html","id":null,"dir":"Reference","previous_headings":"","what":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"function allows WFDB files read WFDB-compatible system, also allows writing WFDB-compatible files specific EP recording systems, indicated details section. Writing WFDB leads creation dat (signal) hea (header) file. required reading files well.","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"","code":"write_wfdb(   data,   record,   record_dir,   wfdb_path = getOption(\"wfdb_path\"),   header = list(frequency = 250, gain = 200L, label = character()),   info_strings = list(),   ... )  read_wfdb(   record,   record_dir = \".\",   annotator = NA_character_,   wfdb_path = getOption(\"wfdb_path\"),   begin = 0,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_signal(   record,   record_dir = \".\",   wfdb_path = getOption(\"wfdb_path\"),   begin = 0,   end = NA_integer_,   interval = NA_integer_,   units = \"digital\",   channels = character(),   ... )  read_header(record, record_dir = \".\", wfdb_path = getOption(\"wfdb_path\"), ...)"},{"path":"https://asshah4.github.io/shiva/reference/wfdb_io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"data Can either egm object, data.frame (similar) object. function appropriately set defaults based type. egm = extract signal header data directly object, thus simplest convert WFDB format signal_table = custom data.table class invariant column containing sample information. data.frame data.table = Must column represents time point index, columns represent signal values (preferably integers) record String used name WFDB record. include extensions, filepath. alphanumeric characters acceptable, well hyphens (-) underscores (_) record_dir File path directory used read write files. Defaults current directory. wfdb_path Path leads installed wfdb software package device. Needs directly set using set_wfdb_path(). Obtained system options loading package, getOption('wfdb_path') header header file optional named list parameters used organize describe signal input data argument. type given, specific additional elements searched , low high pass filters, colors, signal attributes. minimum, following elements required (calculated): frequency = sample frequency Hertz label = vector names channel start_time = date/time object annotator String name WFDB-compatible annotation type, serving extension file written containing annotation. Please see read_annotation() write_annotation() details. begin, end, interval Timepoint seconds, converted index position based sampling frequency. default start beginning record. end interval given, earlier two returned. end argument gives time index read . interval argument length time past start point. units string representing either digital (DEFAULT) physical units used, available. digital = Index sample number, signal integers (/D units) physical = Index elapsed time, signal decimal voltage (e.g. mV). include 1 additional row header/column names describes units channels Either signal/channel vector name number. Allows duplication signal re-order signal needed. nothing given, default channels available.","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_io.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"write_wfdb(): Writes signal header data WFDB-compatible format R. read_wfdb(): Reads multicomponent WFDB-formatted set files directly egm object. serves pull together read_signal(), read_header(), read_annotation() simplicity. read_signal(): Specifically reads signal data WFDB binary format, returning signal_table object evaluation R environment read_header(): Specifically reads header data WFDB header text format, returning header_table object evaluation R environment","code":""},{"path":"https://asshah4.github.io/shiva/reference/wfdb_io.html","id":"recording-systems","dir":"Reference","previous_headings":"","what":"Recording systems","title":"I/O of WFDB-compatible signal & header files from EP recording systems — wfdb_io","text":"Type signal data, specified recording system, currently supported. lspro = LabSystem Pro, e.g. read_lspro() muse = GE MUSE, e.g. read_muse()","code":""},{"path":"https://asshah4.github.io/shiva/news/index.html","id":"shiva-0009000","dir":"Changelog","previous_headings":"","what":"shiva 0.0.0.9000","title":"shiva 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
